Цвет
----
Для хранения цвета используется класс Color, который хранит цвет в формате RGBA, где каждый компонент занимает 8 бит. Диапазон значений компонент цвета здесь [0, 255].
Конструктор по умолчанию определяет белый непрозрачный цвет.
Есть версия конструктора, который позволяет задать три цветовые компоненты rgb и 
альфа-канал (опционально). Если альфа-канал не задается, то задается непрозрачный цвет.
Есть конструктор, который строит цвет из 32-битной беззнаковой целой.

Методы void setComp( uint8_t newValue ) и uint8_t comp() const позволяют задавать и соответственно получать 
значения отдельных компонент цвета. Вместо "Comp" нужно подставить "Red", "Green", "Blue", "Alpha". Вместо 
"comp" аналогично, но название компоненты начинается с нижнего регистра.

Переменные этого класса можно складывать, вычитать, прибавлять к ним и отнимать от них другие переменные
этого же класса, сравнивать на равенство и неравенство.

  uint8_t* begin() - можно получить доступ к начальному элементу цвета как к указателю;
  uint8_t* end() - получить значение указателя, указывающего на память сразу за последним элементом цвета.
  uint8_t& operator[]( int index ) - доступ к компоненте цвета по индексу.
Существуют константные версии этих трех методов.

  uint8_t zeroIntensity() - статический метод для получения минимальной интенсивности цвета.
  uint8_t maxIntensity() - статический метод для получения максимальной интенсивности цвета.

  uint32_t toInt32() - возвращает цвет как 32-х битное беззнаковое целое.


Класс Colorf
------------
Есть версия для хранения цвета в формате 4-х float, которая описывается классом Colorf. Диапазон значений
компонент цвета здесь [0, 1].
Помимо операций, аналогичных классу Color, здесь можно умножать друг на друга и на число с плавающей точкой.
  Colorf saturate() - возвращает цвет, у которого компоненты зажаты в диапазон [0, 1].
  float brightness() - возвращает среднеарифметическое компонент rgb.

Можно строить экземпляры классов, передавая целочисленной версии экземпляр дробной версии и наоборот.

 